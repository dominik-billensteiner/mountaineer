{"version":3,"sources":["components/TourInfo/TourInfo.jsx","components/Bar/SearchBox/SearchBox.jsx","components/Bar/Bar.jsx","components/Mountaineer/Mountaineer.jsx","serviceWorker.js","index.js"],"names":["TourInfo","tour","className","title","icon","faArrowsAltH","distance","faSortUp","duration","ascent","faSortDown","descent","SearchBox","list","setList","useState","tourQuery","setTourQuery","searchResults","setSearchResults","committedSearch","setCommittedSearch","loading","setLoading","typing","setTyping","loadingSpinnerBlock","noResultsFoundBlock","onClick","e","handleTourSelection","getTourList","query","a","fetch","method","mode","cache","credentials","headers","Accept","redirect","referrerPolicy","rawResponse","json","idList","isEmptyArray","data","status","toString","dataIDs","forEach","obj","push","id","getTourData","console","error","log","elevation","maxAltitude","date","Date","toLocaleString","round","length","time","min","value","precision","multiplier","Math","pow","arr","Array","isArray","type","placeholder","onChange","target","faTrashAlt","preventDefault","handleSearch","faSearch","map","result","key","Bar","library","add","fab","faTrash","Mountaineer","tourList","setTourList","stats","setStats","useEffect","calculateStats","totalDistance","totalAscent","totalDescent","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","then","response","contentType","get","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","startApp","ReactDOM","render","StrictMode","document","getElementById","cordova"],"mappings":"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","file":"static/js/main.beb20ae5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./TourInfo.scss\";\r\n// Import fontawesome icons\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faArrowsAltH,\r\n  faSortUp,\r\n  faSortDown,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TourInfo = ({ tour }) => {\r\n  /***\r\n   * Round to specified decimal.\r\n   */\r\n  const round = (value, precision) => {\r\n    let multiplier = Math.pow(10, precision || 0);\r\n    return Math.round(value * multiplier) / multiplier;\r\n  };\r\n\r\n  // Render\r\n  return (\r\n    <div className=\"tour\">\r\n      <p className=\"tour__title\">{tour.title}</p>\r\n      <span className=\"tour__property-container\">\r\n        <div className=\"tour__property\">\r\n          <FontAwesomeIcon icon={faArrowsAltH} />\r\n          <span> {tour.distance} km</span>\r\n        </div>\r\n        <div className=\"tour__property\">\r\n          <FontAwesomeIcon icon={faSortUp} />\r\n          <span> {tour.duration} h</span>\r\n        </div>\r\n        <div className=\"tour__property\">\r\n          <FontAwesomeIcon icon={faSortUp} />\r\n          <span> {tour.ascent} hm</span>\r\n        </div>\r\n        <div className=\"tour__property\">\r\n          <FontAwesomeIcon icon={faSortDown} />\r\n          <span> {tour.descent} hm</span>\r\n        </div>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nTourInfo.propTypes = {\r\n  mountain: PropTypes.string,\r\n  elevation: PropTypes.number,\r\n  date: PropTypes.string,\r\n  distance: PropTypes.number,\r\n  duration: PropTypes.number,\r\n  ascent: PropTypes.number,\r\n  descent: PropTypes.number,\r\n};\r\n\r\nexport default TourInfo;\r\n","import React, { useState } from \"react\";\r\nimport TourInfo from \"../../TourInfo/TourInfo\";\r\nimport \"./SearchBox.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// Constants for outdooractive API data\r\nconst API_KEY = \"yourtest-outdoora-ctiveapi\"; // API key (currently test-version)\r\nconst API_PROJECT = \"api-dev-oa\"; // API project (currently test-version)\r\nconst API_CAT_HIKING = \"8982342\"; // Category ID for Hiking\r\nconst API_CAT_MOUNTAINEERING = \"8982359\"; // Category ID for Mountaineering\r\nconst API_LANGUAGE = \"de\"; // Language code\r\n\r\n/***\r\n * Enables searching for tours registered in the API.\r\n * Search results are entered in a searchbox and displayed in a dropdown list.\r\n * On selection of a item the add tour display is shown.\r\n */\r\nconst SearchBox = ({ list, setList }) => {\r\n  // Search query to add a tour (Userinput)\r\n  const [tourQuery, setTourQuery] = useState(\"\");\r\n\r\n  // Search results to display a suggestions for the user input\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Awaiting a tour selection by the user, true if user committed a search\r\n  const [committedSearch, setCommittedSearch] = useState(false);\r\n\r\n  // Loading is enabled, when data is beeing fechted from API\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // User is currently typing, or typed something in the searchbox\r\n  const [typing, setTyping] = useState(false);\r\n\r\n  // Displayed when in loading state\r\n  const loadingSpinnerBlock = (\r\n    <div className=\"searchbox__results\">\r\n      <div className=\"searchbox__spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Displayed if no results have been found\r\n  const noResultsFoundBlock = (\r\n    <div className=\"searchbox__item-wrapper\">\r\n      <div\r\n        className=\"item\"\r\n        onClick={(e) => {\r\n          handleTourSelection(e);\r\n        }}\r\n      >\r\n        <span>Keine Ergebnisse gefunden.</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  /**\r\n   * Gets list of tours from API.\r\n   *\r\n   * @param {string} query - Search query for tour (user input).\r\n   */\r\n  const getTourList = async (query) => {\r\n    // Early return on empty query\r\n    if (query === \"\" || query === null) {\r\n      return;\r\n    }\r\n\r\n    // Reset search results\r\n    setSearchResults(\"\");\r\n\r\n    // Set loading state\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Full text search (POIs and tours) on outdooractive API returns an id list\r\n      const rawResponse = await fetch(\r\n        // With categories\r\n        `http://www.outdooractive.com/api/search/?q=${query}&category=${API_CAT_HIKING},${API_CAT_MOUNTAINEERING}&key=${API_KEY}&project=${API_PROJECT}&lang=${API_LANGUAGE}`,\r\n        // Without categories\r\n        //`http://www.outdooractive.com/api/search/?q=${query}&key=${API_KEY}&project=${API_PROJECT}&lang=${API_LANGUAGE}`,\r\n        {\r\n          method: \"GET\",\r\n          mode: \"cors\",\r\n          cache: \"no-cache\",\r\n          credentials: \"same-origin\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n          },\r\n          redirect: \"follow\",\r\n          referrerPolicy: \"no-referrer\",\r\n        }\r\n      );\r\n\r\n      // If promised is resolved, body of response contains retreived id list\r\n      const idList = await rawResponse.json();\r\n\r\n      // Return if no search results have been found\r\n      if (isEmptyArray(idList.data)) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Check for successful request\r\n      if (rawResponse.status.toString() === \"200\") {\r\n        // Array of IDs retrieved via API request\r\n        let dataIDs = [];\r\n\r\n        // Push retrieved IDs\r\n        idList.data.forEach((obj) => {\r\n          dataIDs.push(obj.id);\r\n        });\r\n\r\n        // Get attributes for retrieved tours\r\n        getTourData(dataIDs);\r\n      } else console.error(`Error status: ${rawResponse.status.toString()}`);\r\n    } catch (e) {\r\n      console.error(`ERROR ERROR: ${e}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get attributes for all retrieved tours.\r\n   * @param {Array} dataIDs - Array of IDs retreived via API request.\r\n   */\r\n  const getTourData = async (dataIDs) => {\r\n    try {\r\n      // Gets set of attributes from outdooractive API for every ID in the Array\r\n      const rawResponse = await fetch(\r\n        `http://www.outdooractive.com/api/project/api-dev-oa/oois/${dataIDs}?key=yourtest-outdoora-ctiveapi&display=list`,\r\n        {\r\n          method: \"GET\",\r\n          mode: \"cors\",\r\n          cache: \"no-cache\",\r\n          credentials: \"same-origin\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n          },\r\n          redirect: \"follow\",\r\n          referrerPolicy: \"no-referrer\",\r\n        }\r\n      );\r\n\r\n      // If promised is resolved, body of response contains tours with all attributes\r\n      const data = await rawResponse.json();\r\n\r\n      // Proceed if response was successfull\r\n      if (rawResponse.status.toString() === \"200\") {\r\n        console.log(data.tour);\r\n        // Assign tour data (located in a subarray called \"tour\") to state variable searchResults\r\n        setSearchResults(data.tour);\r\n      } else {\r\n        // Throw error if request was not successfull\r\n        console.error(\r\n          `[getTourData] Error fetching tour data from API: Status ${rawResponse.status.toString()}`\r\n        );\r\n      }\r\n    } catch (e) {\r\n      // Throw error if any error occured\r\n      console.error(\r\n        `[getTourData] Error fetching tour data from API: Status ${e}`\r\n      );\r\n    }\r\n    // Unset loading state\r\n    setLoading(false);\r\n  };\r\n\r\n  /***\r\n   * Handles search request.\r\n   */\r\n  const handleSearch = (e) => {\r\n    // Prevent default\r\n    e.preventDefault();\r\n\r\n    // Search has been committed\r\n    setCommittedSearch(true);\r\n\r\n    // Get list of search results\r\n    getTourList(tourQuery);\r\n  };\r\n\r\n  /***\r\n   * Handles tour selection.\r\n   */\r\n  const handleTourSelection = (tour) => {\r\n    setCommittedSearch(false);\r\n    setList([\r\n      ...list,\r\n      {\r\n        id: tour.id,\r\n        title: tour.title,\r\n        elevation: tour.elevation.maxAltitude,\r\n        date: new Date().toLocaleString(),\r\n        distance: round(tour.length / 1000, 1),\r\n        duration: round(tour.time.min / 60, 2),\r\n        ascent: tour.elevation.ascent,\r\n        descent: tour.elevation.descent,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  /***\r\n   * Round to specified decimal.\r\n   */\r\n  const round = (value, precision) => {\r\n    let multiplier = Math.pow(10, precision || 0);\r\n    return Math.round(value * multiplier) / multiplier;\r\n  };\r\n\r\n  /***\r\n   * Check if given array is empty.\r\n   * @return {Boolean} - Returns true if empty.\r\n   */\r\n  const isEmptyArray = (arr) => {\r\n    if (!Array.isArray(arr)) {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  // Render\r\n  return (\r\n    <>\r\n      <form className=\"searchbox\">\r\n        <input\r\n          className=\"searchbox__input text\"\r\n          type=\"text\"\r\n          id=\"searchbox\"\r\n          value={tourQuery}\r\n          placeholder=\"Tour hinzufügen ...\"\r\n          onChange={(e) => {\r\n            setTyping(true);\r\n            setTourQuery(e.target.value);\r\n          }}\r\n        />\r\n        {typing ? (\r\n          // Only show delete button if user entered something\r\n          <div className=\"searchbox__btn\">\r\n            <span\r\n              onClick={(e) => {\r\n                setTourQuery(\"\");\r\n                setTyping(false);\r\n                setCommittedSearch(false);\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </span>\r\n          </div>\r\n        ) : null}\r\n        <button\r\n          className=\"searchbox__btn\"\r\n          onClick={(e) => {\r\n            handleSearch(e);\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faSearch} />\r\n        </button>\r\n      </form>\r\n      {\r\n        // Search committed, but API still loading - display loading spinner\r\n        committedSearch && loading && loadingSpinnerBlock\r\n      }\r\n      {\r\n        // Search committed, loading finished\r\n        committedSearch && !loading && (\r\n          <div className=\"searchbox__results\">\r\n            {isEmptyArray(searchResults)\r\n              ? // No search results have been found\r\n                noResultsFoundBlock\r\n              : // Display list of search results\r\n                searchResults.map((result) => {\r\n                  return (\r\n                    <div\r\n                      key={result.id}\r\n                      className=\"searchbox__item-wrapper\"\r\n                      onClick={(e) => {\r\n                        handleTourSelection(result);\r\n                      }}\r\n                    >\r\n                      <TourInfo\r\n                        tour={{\r\n                          id: result.id,\r\n                          title: result.title,\r\n                          elevation: result.elevation.maxAltitude,\r\n                          date: new Date().toLocaleString(),\r\n                          distance: round(result.length / 1000, 1),\r\n                          duration: round(result.time.min / 60, 2),\r\n                          ascent: result.elevation.ascent,\r\n                          descent: result.elevation.descent,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n          </div>\r\n        )\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport SearchBox from \"./SearchBox/SearchBox\";\r\nimport \"./Bar.scss\";\r\n\r\nconst Bar = ({ list, setList }) => {\r\n  return (\r\n    <div className=\"bar\">\r\n      <SearchBox list={list} setList={setList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TourInfo from \"../TourInfo/TourInfo\";\r\nimport Bar from \"../Bar/Bar\";\r\nimport \"./style.scss\";\r\n\r\n// Import font awesome icons\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faSearch, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nlibrary.add(fab, faSearch, faTrash);\r\n\r\n/***\r\n * Main App file.\r\n */\r\nfunction Mountaineer() {\r\n  // List of tours\r\n  const [tourList, setTourList] = useState([\r\n    {\r\n      id: null,\r\n      title: \"\",\r\n      elevation: null,\r\n      date: \"\",\r\n      distance: null,\r\n      duration: null,\r\n      ascent: null,\r\n      descent: null,\r\n    },\r\n  ]);\r\n\r\n  // Statistics from all tours\r\n  const [stats, setStats] = useState([]);\r\n\r\n  // Load list of tours onComponentDidMount\r\n  useEffect(() => {\r\n    setTourList([\r\n      {\r\n        id: 0,\r\n        title: \"Schoberstein\",\r\n        elevation: 1286,\r\n        date: \"20.06.2020\",\r\n        distance: 12,\r\n        duration: 2,\r\n        ascent: 12,\r\n        descent: 12,\r\n      },\r\n    ]);\r\n    console.log(\"UseEffect tourList: first time update Statistics\");\r\n    setStats(calculateStats);\r\n  }, []);\r\n\r\n  // Whenever tour list changes, update statistics\r\n  useEffect(() => {\r\n    console.log(\"UseEffect tourList: update Statistics\");\r\n    setStats(calculateStats);\r\n  }, [tourList]);\r\n\r\n  /***\r\n   * Calculate statistics.\r\n   * @return {Object} - Statistics object with total distance, ascent and descent.\r\n   */\r\n  const calculateStats = () => {\r\n    let totalDistance = 0;\r\n    let totalAscent = 0;\r\n    let totalDescent = 0;\r\n    console.log(tourList);\r\n\r\n    tourList.map((tour) => {\r\n      totalDistance += tour.distance;\r\n      totalAscent += tour.ascent;\r\n      totalDescent += tour.descent;\r\n    });\r\n    return {\r\n      distance: totalDistance,\r\n      ascent: totalAscent,\r\n      descent: totalDescent,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__header\">\r\n        <Bar list={tourList} setList={setTourList} />\r\n      </div>\r\n      <div className=\"app__content\">\r\n        <div className=\"app__box\">\r\n          <h3 className=\"heading\">Meine Statistik</h3>\r\n          <TourInfo\r\n            tour={{\r\n              id: 0,\r\n              elevation: 0,\r\n              date: null,\r\n              title: \"\",\r\n              distance: stats.distance,\r\n              duration: 0,\r\n              ascent: stats.ascent,\r\n              descent: stats.descent,\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"app__box\">\r\n          <h3 className=\"heading\">Meine Touren</h3>\r\n          <div className=\"tours__list\">\r\n            {tourList.map((tour) => {\r\n              return (\r\n                // Display all tours with propertys\r\n                <TourInfo\r\n                  key={tour.id}\r\n                  tour={{\r\n                    id: tour.id,\r\n                    elevation: tour.elevation,\r\n                    date: tour.date,\r\n                    title: tour.title,\r\n                    distance: tour.distance,\r\n                    duration: tour.duration,\r\n                    ascent: tour.ascent,\r\n                    descent: tour.descent,\r\n                  }}\r\n                />\r\n                // Display control buttons\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Mountaineer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Mountaineer from \"./components/Mountaineer/Mountaineer\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst startApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Mountaineer />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: https://bit.ly/CRA-PWA\r\n  serviceWorker.register();\r\n};\r\n\r\nif (window.cordova) {\r\n  // for iOS / Android\r\n  document.addEventListener(\"deviceready\", startApp, false);\r\n} else {\r\n  // for Web\r\n  startApp();\r\n}\r\n"],"sourceRoot":""}